{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/svenhumburg/Projekte/graphql/pages/api/graphql.js"],"sourcesContent":["// pages/api/graphql.ts\nimport { ApolloServer, gql } from 'apollo-server-micro';\nimport Cors from 'micro-cors';\n\nconst cors = Cors({\n  origin: '*', \n  allowMethods: ['POST', 'GET', 'OPTIONS'],\n  allowHeaders: ['Content-Type'],\n  allowCredentials: true,\n});\n\n\n// Beispiel-Schema\nconst typeDefs = gql`\n  \n  type Query {\n    hello: String\n  }\n  \n  type User {\n    id: ID!\n    name: String\n    email: String\n  }\n  \n  type Level {\n    id: ID!\n    levelstr: String!\n    bonustime: Int!\n    proofed: Int!\n    levelType: String!\n  }\n\n  type Book {\n    title: String\n    vendor: Author\n  }\n  \n  type Author {\n    id: ID!\n    firstname: String\n    lastname: String\n  }\n  \n  type Answer {\n    id: ID!\n    answer1: String!\n  }\n  \n  type Poi {\n    title: String\n    author: String\n    oldField: String @deprecated(reason: \"Use newField.\")\n  }\n  \n  union SearchResult = Fruits | Vegetable\n  union Grocery = Fruits | Vegetable\n  \n  interface Grocery {\n    id: ID!\n    name: String\n    price: Int!\n    quantity: Int\n  }\n  \n  type Fruits implements Grocery {\n    id: ID!\n    name: String\n    price: Int!\n    quantity: Int\n    averageWeight: Int\n    hasEdibleSeeds: Boolean\n    nutrients: [String!]\n    vendor: Stall\n  }\n  \n  type Vegetable implements Grocery {\n    id: ID!\n    name: String\n    price: Int!\n    quantity: Int\n    averageWeight: Int\n    nutrients: [String!]\n    isPickled: Boolean\n    vendor: Stall\n  }\n  \n \n  type Stall {\n    id: ID!\n    name: String!\n    stallNumber: String!\n    availableFruits: [Fruits!]!\n  }\n\n  type Query {\n    books: [Book]\n    author: [Author]\n    grocerys: [Grocery]\n    levels: [Level]\n    poi: [Poi]\n    fruits: [Fruits]\n    answers: [Answer]\n    mostPopularFruits: [Fruits]\n    stalls: [Stall!]!\n    fruitsById(id: ID!): Fruits\n    search(query: String): [SearchResult!]\n  }\n \n  \n  type Mutation {\n    addLevel(input:LevelInput): Level\n    addBook(input: BookContent): Book\n    addAnswer(input: AnswerContent): Answer\n    updateLevel(input: LevelInput): Level\n    deleteLevel(input: LevelIdInput): Level\n  }\n  \n  input BookContent {\n    title: String\n    vendor: AuthorInput\n  }\n  \n  input AuthorInput {\n    firstname: String\n    lastname: String\n  }\n  \n  input AnswerContent {\n    answer1: String\n  }\n  \n  input LevelInput {\n    id: Int\n    levelstr: String\n    bonustime: Int\n    proofed: Int\n    levelType: String\n  }\n  \n  input LevelIdInput {\n    id: Int\n  }\n`;\n\n\n// Beispiel-Daten\nconst books = [\n  { title: 'Harry Potter 2', vendorId: \"1\" },\n  { title: 'Herr der Ringe', vendorId: \"2\" }\n];\n\nconst author = [\n  { id: \"1\", firstname: 'J.K.', lastname: 'Rowling' },\n  { id: \"2\", firstname: 'J.R.R', lastname: 'Tolkien' }\n];\n\nconst poi = [\n  { title: 'Harry Potter 2', author: 'J.K. Rowling', date: new Date('2024-01-01T12:00:00Z') },\n  { title: 'Herr der Ringe', author: 'J.R.R. Tolkien', date: new Date('2024-01-01T12:00:00Z') }\n];\n\nconst fruits = [\n  { id: \"1\", name: 'Apple', price: 4, quantity: 3, averageWeight: 4, hasEdibleSeeds: true, nutrients: [1, 2, 3], vendorId: 1},\n  { id: \"2\", name: 'Orange', price: 3, quantity: 2, averageWeight: 4, hasEdibleSeeds: true, nutrients: [1, 2, 3], vendorId: 1 },\n  { id: \"3\", name: 'Banana', price: 4, quantity: 1, averageWeight: 6, hasEdibleSeeds: false, vendorId: 2 }\n];\n\n\nconst vegetables = [\n  { id: \"1\", name: 'Brokoli', price: 4, quantity: 3, averageWeight: 4, hasEdibleSeeds: true, nutrients: [1, 2, 3], vendorId: 1, isPickled: true},\n  { id: \"2\", name: 'Lauch', price: 3, quantity: 2, averageWeight: 4, hasEdibleSeeds: true, nutrients: [1, 2, 3], vendorId: 1, isPickled: true },\n  { id: \"3\", name: 'Erbsen', price: 4, quantity: 1, averageWeight: 6, hasEdibleSeeds: false, vendorId: 2, isPickled: false }\n];\n\nconst stalls = [\n  { id: \"1\", name: 'Stall1', stallNumber: \"A4\", availableFruits: [ 1 ] },\n  { id: \"2\", name: 'Stall2', stallNumber: \"F4\", availableFruits: [1, 2, 3] },\n];\n\n\n// Resolver definieren\nconst resolvers = {\n\n  Query: {\n    hello: () => 'Hello von GraphQL auf Vercel!',\n    answers: async (parent, args, context, info) => {\n      const [rows] = await db.query('SELECT * FROM answers');\n      return rows;\n    },\n    levels: async (parent, args, context, info) => {\n      const [rows] = await db.query('SELECT * FROM level');\n      return rows;\n    },\n    books: () => books,\n    poi: () => poi,\n    author: () => author,\n    fruits: () => fruits,\n    grocerys: () => [...fruits, ...vegetables],\n    fruitsById: (_, { id }) => fruits.find(f => f.id === id),\n    mostPopularFruits: () => fruits,\n    stalls: () => stalls,\n    search: (_, { query }) => {\n      const resultFruits = fruits.filter(f => f.name.toLowerCase().includes(query.toLowerCase()));\n      const resultVegetables = vegetables.filter(v => v.name.toLowerCase().includes(query.toLowerCase()));\n      return [...resultFruits, ...resultVegetables];\n    },\n  },\n\n  SearchResult: {\n    __resolveType(obj) {\n      if (obj.hasEdibleSeeds !== undefined) {\n        return 'Fruits';\n      }\n      if (obj.isPickled !== undefined) {\n        return 'Vegetable';\n      }\n      return null; // fallback\n    },\n  },\n\n  Grocery: {\n    __resolveType(obj) {\n      if (obj.hasEdibleSeeds !== undefined) {\n        return 'Fruits';\n      }\n      if (obj.isPickled !== undefined) {\n        return 'Vegetable';\n      }\n      return null; // fallback\n    },\n  },\n\n  Book: {\n    vendor: (book) => author.find(author => book.vendorId === author.id),\n  },\n\n  Fruits: {\n    vendor: (fruit) => stalls.find(stall => stall.id === fruit.vendorId),\n    //name: (fruit) => fruit.name.toUpperCase(),\n  },\n  Stall: {\n    availableFruits: (stall) => {\n      return fruits.filter(fruit => stall.availableFruits.includes(fruit.id));\n    }\n  },\n  Mutation: {\n    updateLevel: async (_, { input }) => {\n      const { id, ...fields } = input;\n      if (Object.keys(fields).length === 0) {\n        throw new Error('Keine Felder zum Aktualisieren übergeben.');\n      }\n\n      const sqlParts = [];\n      const values = [];\n\n      for (const key in fields) {\n        sqlParts.push(`${key} = ?`);\n        values.push(fields[key]);\n      }\n\n      const sql = `UPDATE level SET ${sqlParts.join(', ')} WHERE id = ?`;\n      values.push(id);\n\n      try {\n        const [result] = await db.query(sql,\n          values\n        );\n        const [rows] = await db.query('SELECT * FROM level WHERE id = ?', [id]);\n        return rows[0];\n      } catch (error) {\n        console.error('Fehler beim Ändern des Levels:', error);\n        throw new Error('Fehler beim Ändern des Levels');\n      }\n    },\n\n    addLevel: async (_, { input }) => {\n      const { levelstr, bonustime, proofed, levelType } = input;\n\n      try {\n        const [result] = await db.query(\n          'INSERT INTO level (levelstr, bonustime, proofed, levelType) VALUES (?, ?, ?, ?)',\n          [levelstr, bonustime, proofed, levelType]\n        );\n        return {\n          id: result.insertId,\n          levelstr: levelstr,\n          bonustime: bonustime,\n          proofed: proofed,\n          levelType: levelType,\n        };\n      } catch (error) {\n        console.error('Fehler beim Einfügen des Levels:', error);\n        throw new Error('Fehler beim Hinzufügen des Levels');\n      }\n    },\n\n    deleteLevel: async (_, { input }) => {\n      const { id } = input;\n\n      try {\n        const [result] = await db.query(\n          'DELETE FROM LEVEL WHERE id=?',\n          [id]\n        );\n        return {\n          id: id,\n        };\n      } catch (error) {\n        console.error('Fehler beim Löschen des Levels:', error);\n        throw new Error('Fehler beim Löschen des Levels');\n      }\n    },\n\n    addBook: async (_, { input }) => {\n      const { title, vendor } = input;\n      const { firstname, lastname } = vendor;\n      const nextId = (author.length > 0\n        ? Math.max(...author.map(a => parseInt(a.id))) + 1\n        : 1).toString();\n\n      // Vendor hinzufügen\n      author.push({ id: nextId, firstname, lastname });\n\n      // Buch hinzufügen mit Vendor-Referenz\n      const newBook = {\n        title,\n        vendorId: nextId\n      };\n      books.push(newBook);\n\n\n      return {\n        title,\n        vendor: {\n          firstname,\n          lastname\n        }\n      };\n    },\n    addAnswer: async (_,{input} ) => {\n      const {answer1} = input;\n      try {\n        const [result] = await db.query(\n          'INSERT INTO answers (answer1) VALUES (?)',\n          [answer1]\n        );\n        // Rückgabe des eingefügten Werts (du kannst auch andere Felder zurückgeben, wenn du sie benötigst)\n        return {\n          id: result.insertId,\n          answer1: answer1// Rückgabe des eingefügten Werts\n        };\n      } catch (error) {\n        console.error('Fehler beim Einfügen der Antwort:', error);\n        throw new Error('Fehler beim Hinzufügen der Antwort');\n      }\n    },\n  },\n};\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst startServer = apolloServer.start();\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nconst handler = async (req, res) => {\n  if (req.method === 'OPTIONS') {\n    res.end(); // schnell auf preflight reagieren\n    return;\n  }\n\n  await startServer;\n  await apolloServer.createHandler({ path: '/api/graphql' })(req, res);\n};\n\nexport default cors(handler);"],"names":[],"mappings":"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","debugId":null}}]
}